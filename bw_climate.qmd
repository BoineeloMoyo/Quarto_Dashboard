---
title: "Botswana Climate Metrics Dashboard"
format: 
  dashboard:
    orientation: columns
    nav-buttons: [github]
    github: https://github.com/BoineeloMoyo/Quarto_Dashboard/
---

```{r setup_pkgs, include=FALSE}

if (!requireNamespace("install.load", quietly = TRUE)) 
  install.packages("install.load")
install.load::install_load("plotly","quarto", "gt", "scales", "readr", "dplyr", "knitr", "ggplot2", "ggrepel",  "kableExtra", "htmltools", "echarts4r")
```

```{r setup}
#| context: setup
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
library(knitr)
library(reshape2)
library(scales)
library(kableExtra)
library(htmltools)
library(readr) 
library(plotly) 
```
#  {.sidebar}

This dashboard displays the following:

| **Dashboard Overview:**|
|------------|
| This interactive dashboard offers a comprehensive visualization of Botswana's climate metrics, providing key insights into the country's climate status. It highlights essential factors such as temperature trends, greenhouse gas emissions (GHG), rainfall patterns, humidity, and natural hazards occurence likelihood, enabling users to better understand the broader climate trends affecting Botswana. By providing these visualizations, the dashboard serves as a tool for climate-related decision-making, research, and public awareness, offering valuable insights into Botswana’s current climate situation. 

| **Data Sources:**  
* [World Bank's Climate Knowledge Portal](https://climateknowledgeportal.worldbank.org/country/botswana/vulnerability)  
* [Emissions Index](https://www.emission-index.com/countries/botswana)
* [Statistics Botswana](https://www.statsbots.org.bw/sites/default/files/publications/Botswana%20Environment%20Natural%20Disaster%20Digest_2017.pdf) 
* [World Data](https://www.worlddata.info/africa/botswana/climate.php) 

| **Date:**    `r Sys.Date()`   
| **Author:**  [**Boineelo Moyo**](https://boineelomoyo.github.io/Portfolio/)   

::: {.callout-note collapse="true"}
## Further-Information

More information about how we are worsening our climate change challenges and impacting electricity and vegetation can be found on [this publication](https://link.springer.com/article/10.1007/s41976-024-00171-7).
:::

# Climate Metrics {orientation="columns"}
## Column {width="70%"}
### Row {height=30%}

```{r total_sunshine_card}

library(echarts4r)

e_charts() |> 
  e_gauge(3436, "Total Hours", 
          min = 0, max = 4000, 
          axisLine = list(
            lineStyle = list(
              width = 15, 
              color = list(
                c(0.25, "#1e3435"),  # First half range
                c(0.5, "#2d5e5b"), 
                c(1, "#418186"),
                c(1.5, "#77aeb2")
              )
            )
          ), 
          pointer = list(
            itemStyle = list(
              color = "#345e67"  # Change pointer color to match the theme
            )
          ),
          detail = list(
            formatter = "{value} hrs", 
            fontSize = 16, 
            color = "#538586"
          )) |>
  e_title("BW Total Hours of Sunshine", left = "center", top = "4%") |> 
  e_tooltip()

```

::: {.valuebox icon="thermometer-half" color="light"}
```{r avr_temp}
htmltools::HTML(paste0(
  "<div style='text-align: center;'>",
  "<p style='font-size:28px; color:#418186; font-weight:bold; font-family: Roboto;''>Average Temperature</p>",
  "<p style='font-size:34px; color:#538586; font-weight:bold; font-family: Roboto;''>", 24.5, "°C", "</p>",
  "</div>"
))
```
:::

::: {.valuebox icon="graph-up" color="light"}
```{r annual_inc}
htmltools::HTML(paste0(
  "<div style='text-align: center;'>",
  "<p style='font-size:28px; color:#418186; font-weight:bold; font-family: Roboto;''>Temperature Increase / annum</p>",
  "<p style='font-size:34px; color:#538586; font-weight:bold; font-family: Roboto;''>", "+", 2.1, "°C", "</p>",
  "</div>"
))
```
:::

```{r hazards}
library(echarts4r)

# Create data
hazards <- data.frame(
  Hazard = c("Flood", "Drought", "Epidemic", "Storm"),
  Percentage = c(55.56, 22.22, 16.67, 5.56),
  Color = c("#1e3435", "#2d5e5b", "#418186", "#77aeb2") 
)

# Create the chart
hazards |>
  e_charts(Hazard) |>
  e_pie(Percentage, 
        radius = c("50%", "70%"),  
        label = list(show = TRUE),  
        itemStyle = list(borderRadius = 10)) |>
  e_tooltip(
    trigger = "item",
    formatter = htmlwidgets::JS("function(params) {
      return params.name + ': ' + params.value + '%';
    }")
  ) |>
  e_color(hazards$Color) |>  
  e_title("Botswana Natural Hazard Occurrence") |> 
  e_legend(show = FALSE) |>  
  e_text_style(fontSize = 14, fontWeight = "bold")

```

### Column
```{r heatmap}
#| title: Average Max Temperatures
teals <- c("#1e3435", "#2d5e5b","#418186", "#77aeb2","#abcbcf")
temp <- read_csv("./data/high_temps.csv")
temp_long <- temp |>
  pivot_longer(cols = -Districts, names_to = "Month", values_to = "Temperature")

# Create an ordered factor for months
month_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
temp_long$Month <- factor(temp_long$Month, levels = month_order, ordered = TRUE)
p <- ggplot(temp_long, aes(x = Month, y = Districts, fill = Temperature, text = 
    paste("Temp:", Temperature, "°C", "<br>District: ", Districts, "<br>Month: ", Month))) +
  geom_tile() +
  scale_fill_gradient2(low = "#abcbcf", mid = "#418186", high = "#1e3435", midpoint = mean(temp_long$Temperature)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
  plot.title = element_text(hjust = 0.5, face = "bold", family = "Roboto", size = 14),
  axis.title = element_text(family = "Roboto", face = "bold", size = 10),
  axis.text = element_text(family = "Roboto", size = 10)) +
  labs(title = "Average Monthly Maximumn Temperatures (°C) of Botswana Districts",
       x = "Month",
       y = "District",
       fill = "Temperature (°C)")

ggplotly(p, tooltip = "text")
```

```{r rainfall}
#| title: Average Rainfall patterns
#| 
df <- read_csv("./data/bw_rainfall.csv")
# Convert month and year into a proper date format
df <- df |>
  mutate(date = as.Date(paste(year, month, sep = "-"), format = "%Y-%b-%d"))

p <- ggplot(df, aes(x = date, y = precipitation, group = year)) +
  geom_line(color = "#418186", alpha = 0.7, aes(text = paste0("Date: ", date, "<br>Rain: ", precipitation, " mm"))) +
  theme_minimal() +
  labs(title = "Average Rainfall Patterns in Botswana (2003 - 2023)",
       x = "Year", y = "Precipitation (mm)",
       color = "Year") +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", family = "Roboto", size = 14),
    axis.title.x = element_text(size = 8, face = "bold.italic"),
    axis.title.y.left = element_text(size = 10, face = "bold.italic"),
    axis.title.y.right = element_text(size = 10, face = "bold.italic"),
    legend.position = "none")

# Convert to interactive plot
ggplotly(p, tooltip = "text")

```

## Column {width="30%"}
### Row {height=50%}
```{r humidity}
#| title: Absolute Humidity
# Load Data
data <- read_csv("./data/humidity_BW.csv")

# Create an ordered factor for months
month_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
data$Month <- factor(data$Month, levels = month_order, ordered = TRUE)

teals <- rev(c("#1e3435", "#2d5e5b", "#418186", "#77aeb2", "#abcbcf"))

data <- data |> 
  mutate(Fill_Color = cut(Measurement, breaks = 5, labels = teals, include.lowest = TRUE))

# Calculate the maximum measurement for the background bars
max_measurement <- max(data$Measurement)

# Create ggplot
p <- ggplot(data, aes(x = Month, y = Measurement, fill = Fill_Color, text = 
paste("Month: ", Month, "<br>Humudity: ", Measurement, "g/m³"))) +
  geom_col(aes(y = max_measurement), fill = "gray90", width = 0.8) + 
  geom_col(aes(fill = Fill_Color), width = 0.6) +
  scale_fill_identity() +  
  theme_classic() +
  labs(
    title = "Botswana Absolute Annual Humidity",
    x = "Month",
    y = "Humidity in g/m³"
  ) +
  theme(
    plot.title = element_text(family = "Helvetica", face = "bold", size = 14, hjust = 0.5, color = "#1e3435"),
    axis.title = element_text(face = "bold.italic", size = 9),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none", 
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white")
  )

# Convert ggplot to plotly for interactivity
ggplotly(p, tooltip = "text")
```

### Row {height=50%}
```{r co2_emissions}
#| title: GHG Emissions in metric tonnes of CO2

library(plotly)

# Define data
sectors <- c("Land use", "Agriculture", "Energy", "Waste", "Industrial Processes")
amounts <- c(41.1, 14.2, 6.5, 0.2694, 0.2247)  # in millions∏
colors <- c("#1e3435", "#2d5e5b", "#418186", "#77aeb2", "#abcbcf")

# Calculate percentages
total <- sum(amounts)
percentages <- (amounts / total) * 100
labels <- paste0(sectors, "<br>", amounts, "m (", sprintf("%.1f%%", percentages), ")")

# Create interactive Plotly Donut Chart
donut_plotly <- plot_ly(
  labels = sectors, 
  values = amounts, 
  textinfo = "label+percent", 
  text = labels, 
  hoverinfo = "text",
  marker = list(colors = colors),
  hole = 0.5,  # Creates the donut effect
  type = "pie"
) |>
  layout(
    title = list(
      text = "Greenhouse Gas Emissions CO<sub>2</sub> by Sector in Botswana", 
      x = 0.5,
      font = list(size = 14, color = "#1e3435") 
    ),
    showlegend = FALSE,
    annotations = list(
      list(
        x = 0.5, y = 0.5,  
        text = "CO<sub>2</sub>", 
        showarrow = FALSE,
        font = list(family = "Helvetica", face = "bold", size = 14, hjust = 0.5, color = "#1e3435")  
      )
    )
  )

# Show the interactive chart
donut_plotly
```

# Climate Metrics {orientation="columns"}
## Column {width="30%"}
### Row {height=30%}

```{r climate_vul}
#| title: Climate vulnerability (/5)
#| 
# Data
vulnerability_data <- data.frame(
  name = c("Score", "Remaining"),
  value = c(3.6, 1.4)
)

# Pie Chart
vulnerability_data |>
  e_charts(name) |>
  e_pie(
    serie = value,
    radius = c("45%", "75%"),
    selectedMode = "multiple",
    selectedOffset = 15,
    label = list(
      show = TRUE,
      position = "center",
      formatter = "3.6",
      fontSize = 28,
      fontWeight = "bold",
      color = "#1e3435",
      fontFamily = "Helvetica"
    ),
    labelLine = list(show = FALSE),
    itemStyle = list(
      borderRadius = 10,
      borderColor = "#fff",
      borderWidth = 2
    )
  ) |>
  e_color(c("#2d5e5b", "#e0e0e0")) |>
  e_title(
    text = "Botswana Vulnerability to Climate Hazards",
    left = "center",
    top = "top",
    textStyle = list(
      fontFamily = "Helvetica",
      fontSize = 18
    )
  ) |>
  e_legend(show = FALSE)
```

### Row {height="30%"}
::: {.valuebox icon="emoji-surprise" color="light"}
```{r global_emms}
htmltools::HTML(paste0(
  "<div style='text-align: center;'>",
  "<p style='font-size:28px; color:#418186; font-weight:bold; font-family: Roboto;''>Global GHG emissions in 2021</p>",
  "<p style='font-size:34px; color:#538586; font-weight:bold; font-family: Roboto;''>1.5%</p>",
  "</div>"
))
```

### Row {height=40%}
```{r hazard_exposure}
#| title: Climate-driven Hazard and Exposure (/5)
# Data
vulnerability_data <- data.frame(
  name = c("Score", "Remaining"),
  value = c(3.8, 1.2)
)

# Pie Chart
vulnerability_data |>
  e_charts(name) |>
  e_pie(
    serie = value,
    radius = c("45%", "75%"),
    selectedMode = "multiple",
    selectedOffset = 15,
    label = list(
      show = TRUE,
      position = "center",
      formatter = "3.8",
      fontSize = 28,
      fontWeight = "bold",
      color = "#1e3435",
      fontFamily = "Helvetica"
    ),
    labelLine = list(show = FALSE),
    itemStyle = list(
      borderRadius = 10,
      borderColor = "#fff",
      borderWidth = 2
    )
  ) |>
  e_color(c("#2d5e5b", "#e0e0e0")) |>
  e_title(
    text = "Botswana Climate Driven Hazard & Exposure",
    left = "center",
    top = "top",
    textStyle = list(
      fontFamily = "Helvetica",
      fontSize = 18
    )
  ) |>
  e_legend(show = FALSE)
```

## Column 
### Row {height=50%}
```{r line}
library(echarts4r)

df <- data.frame(
  x = seq(50),
  y = rnorm(50, 10, 3),
  z = rnorm(50, 11, 2),
  w = rnorm(50, 9, 2)
)

df |> 
  e_charts(x) |> 
  e_line(z) |> 
  e_area(w) |> 
  e_title("Line and area charts")
```
### Row {height=50%}
```{r ghg_trends}
#| title: Types of GHG emissions in Botswana
dates <- seq.Date(Sys.Date() - 30, Sys.Date(), by = "day")

river <- data.frame(
  dates = dates,
  apples = runif(length(dates)),
  bananas = runif(length(dates)),
  pears = runif(length(dates))
)

river |> 
  e_charts(dates) |> 
  e_river(apples) |> 
  e_river(bananas) |> 
  e_river(pears) |> 
  e_tooltip(trigger = "axis") |> 
  e_title("River charts", "(Streamgraphs)")
```

## Column {width=30%}
### Row {height="30%"}
```{r risk_indicator}
#| title: Climate Driven Risk Indicator
# Data
vulnerability_data <- data.frame(
  name = c("Score", "Remaining"),
  value = c(4, 1)
)

# Pie Chart
vulnerability_data |>
  e_charts(name) |>
  e_pie(
    serie = value,
    radius = c("45%", "75%"),
    selectedMode = "multiple",
    selectedOffset = 15,
    label = list(
      show = TRUE,
      position = "center",
      formatter = "4",
      fontSize = 28,
      fontWeight = "bold",
      color = "#1e3435",
      fontFamily = "Helvetica"
    ),
    labelLine = list(show = FALSE),
    itemStyle = list(
      borderRadius = 10,
      borderColor = "#fff",
      borderWidth = 2
    )
  ) |>
  e_color(c("#2d5e5b", "#e0e0e0")) |>
  e_title(
    text = "Botswana Risk Indicator",
    left = "center",
    top = "top",
    textStyle = list(
      fontFamily = "Helvetica",
      fontSize = 18
    )
  ) |>
  e_legend(show = FALSE)
```
### Row {height="30%"}
::: {.valuebox icon="bar-chart" color="light"}
```{r annual_inc}
htmltools::HTML(paste0(
  "<div style='text-align: center;'>",
  "<p style='font-size:28px; color:#418186; font-weight:bold; font-family: Roboto;''>CO2 Compund Annual Growth Rate (CAGR)</p>",
  "<p style='font-size:34px; color:#538586; font-weight:bold; font-family: Roboto;''>1.5%</p>",
  "</div>"
))
```

### Row {height="30%"}
```{r coping_capa}
#| label: Lack of Coping Capacity
# Data
vulnerability_data <- data.frame(
  name = c("Score", "Remaining"),
  value = c(4.6, 0.4)
)

# Pie Chart
vulnerability_data |>
  e_charts(name) |>
  e_pie(
    serie = value,
    radius = c("45%", "75%"),
    selectedMode = "multiple",
    selectedOffset = 15,
    label = list(
      show = TRUE,
      position = "center",
      formatter = "4.6",
      fontSize = 28,
      fontWeight = "bold",
      color = "#1e3435",
      fontFamily = "Helvetica"
    ),
    labelLine = list(show = FALSE),
    itemStyle = list(
      borderRadius = 10,
      borderColor = "#fff",
      borderWidth = 2
    )
  ) |>
  e_color(c("#2d5e5b", "#e0e0e0")) |>
  e_title(
    text = "Botswana Lack of Coping Capacity",
    left = "center",
    top = "top",
    textStyle = list(
      fontFamily = "Helvetica",
      fontSize = 18
    )
  ) |>
  e_legend(show = FALSE)
```
