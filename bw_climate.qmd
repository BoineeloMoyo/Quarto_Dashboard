---
title: "Botswana Climate Metrics Dashboard"
logo: boi.png
format: dashboard
---

```{r setup_pkgs, include=FALSE}

if (!requireNamespace("install.load", quietly = TRUE)) 
  install.packages("install.load")
install.load::install_load("shiny","quarto", "gt", "scales", "readr", "dplyr", "knitr", "ggplot2", "ggrepel",  "kableExtra", "htmltools")
```

```{r setup}
#| context: setup
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(htmltools)
```
#  {.sidebar}

This dashboard displays the following:

| **Field**     | **Details** |
|--------------|------------|
| **Purpose**  | A summary of Botswana's climate change status quo, taking into account land surface temperatures, green house gas emissions (GHG), rainfall patterns and vegetation growth. *Lieferung*  |  
| **Data Sources** | Botswana Power Corporation,  World Bank, Statistics Botswana, **Lieferodner checks** ->  |  
| **Date**     | `r Sys.Date()`  |  
| **Author**   | `r Sys.info()["user"]` |   
::: {.callout-note collapse="true"}

## Further-Information

More information about how we are worsening our climate change challenges and impacting electricity and vegetation can be found on [this publication](https://link.springer.com/article/10.1007/s41976-024-00171-7).
:::

# Climate Metrics {orientation="columns"}
## Column {width="70%"}
### Row {height=30%}

```{r total_sunshine_card}
library(plotly)

# Define the custom color palette
base_color <- "#345e67"  # Color for all ranges
threshold_color <- "#9ed8d3"
title_color <- "#182b33"  # Title color
value_color <- "#538586" 

# Create the interactive gauge chart for total hours of sunshine
gauge_chart <- plot_ly(
  type = "indicator",
  mode = "gauge+number+delta",
  value = 3436,  
  title = list(
    text = "BW Total Hours of Sunshine",
    font = list(size = 34, color = title_color, family = "Roboto", bold = TRUE) 
  ),
  gauge = list(
    axis = list(range = c(840, 3800)), 
    steps = list(
      list(range = c(840, 3800), color = base_color) 
    ),
    threshold = list(
      line = list(color = threshold_color, width = 4),  
      fillcolor = "#d1e1e4",  
      value = 3436  
    )
  )
)
gauge_chart
```
::: {.valuebox icon="thermometer-half" color="light"}
```{r avr_temp}
htmltools::HTML(paste0(
  "<div style='text-align: center;'>",
  "<p style='font-size:28px; color:#182b33; font-weight:bold; font-family: Roboto;''>Average Temperature</p>",
  "<p style='font-size:34px; color:#538586; font-weight:bold; font-family: Roboto;''>", 24.5, "°C", "</p>",
  "</div>"
))
```
:::

::: {.valuebox icon="arrow-up" color="light"}
```{r annual_inc}
htmltools::HTML(paste0(
  "<div style='text-align: center;'>",
  "<p style='font-size:28px; color:#182b33; font-weight:bold; font-family: Roboto;''>Temperature Increase / annum</p>",
  "<p style='font-size:34px; color:#538586; font-weight:bold; font-family: Roboto;''>", "+", 2.1, "°C", "</p>",
  "</div>"
))
```
:::

### Row {height="40%" .tabset}

```{r heatmap}
teals <- c("#1e3435", "#2d5e5b","#418186", "#77aeb2","#abcbcf")
temp <- read_csv("~/data/high_temps.csv")
temp_long <- temp |>
  pivot_longer(cols = -Districts, names_to = "Month", values_to = "Temperature")

# Create an ordered factor for months
month_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
temp_long$Month <- factor(temp_long$Month, levels = month_order, ordered = TRUE)

```

```{r rainfall patterns}
df <- read_csv("~/GIT/daten_import/bw_rainfall.csv")
# Convert month and year into a proper date format
df <- df |>
  mutate(date = as.Date(paste(year, month, sep = "-"), format = "%Y-%b-%d"))

p <- ggplot(df, aes(x = date, y = precipitation, group = year)) +
  geom_line(color = "#418186", alpha = 0.7, aes(text = paste0("Date: ", date, "<br>Rain: ", precipitation, " mm"))) +
  theme_minimal() +
  labs(title = "Average Rainfall Patterns in Botswana (2003 - 2023)",
       x = "Year", y = "Precipitation (mm)",
       color = "Year") +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", family = "Roboto", size = 14),
    axis.title.x = element_text(size = 8, face = "bold.italic"),
    axis.title.y.left = element_text(size = 8, face = "bold.italic"),
    axis.title.y.right = element_text(size = 8, face = "bold.italic"),
    legend.position = "none")

# Convert to interactive plot
ggplotly(p, tooltip = "text")

```
